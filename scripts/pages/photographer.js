const currentPage = "photographer.html"
//const defaultFilter = "likesDesc"
//let filter = "likesDesc"
//let likedMediasIds = []
let lightbox

class MediaLibrary {
    #medias = [] // [{ mediaModel , getMediaCardDOM }, ...]
    #likes
    #currentSorting
    #DOMTarget
    // lightboxCursorPos

    constructor(DOMTarget){
        if(DOMTarget) this.#DOMTarget = DOMTarget
    }

    // build the medialibrary cycling through all the medias produced by the mediafactory
    build(medias){
        medias.forEach(media => {
            const mediaModel = mediaFactory(media) // TODO error testing
            mediaLibrary.add(mediaModel)
        })
        return this // to chain methods
    }

    // add a media generated by the mediafactory to the medialibrary
    add(mediaModel){
        if(mediaModel) this.#medias.push(mediaModel)
    }

    // specify a container for the nodal representation of the medialibrary
    addDOMTarget(DOMTarget){
        if(DOMTarget) this.#DOMTarget = DOMTarget
        return this // to chain methods
    }

    // push to the DOM a nodal representation of the medialibrary
    toDOM(){
        if(!this.#DOMTarget) throw new Error("Use addDOMTarget() method beforehand to specify a parent container")
        this.#DOMTarget.innerHTML=""
        this.#medias.forEach(media => {
            const mediaCardDOM = media.getMediaCardDOM() // TODO error testing
            this.#DOMTarget.appendChild(mediaCardDOM)
        })
    }

    get likesSum(){
        let sum = 0
    }

    // used by the lightbox to avoid cycling out of boundaries
    get length(){
        return this.#medias.length
    }

    // used by the lightbox to get the medialibrary index of a selected media
    getIndexOf(mediaId){
        const media = this.#medias.filter(media => media.mediaModel.id === mediaId)[0]
        return this.#medias.indexOf(media)
        // TODO throw error if media doesn't exist
    }

    // used by the lightbox to display the previous / next media
    getMediaAtIndex(index){

    }

    isLiked(mediaId){ // or liked key into the media object?

    }

    // sorting the medialibrary using the passed argument
    sort(argument){
        if(argument!=="likesDesc" && argument!=="dateDesc" && argument!=="titleAsc" ) throw new Error("Unknown sorting argument.") 
        this.#currentSorting = argument
        if (argument === "likesDesc"  && this.length > 1) this.#medias.sort((a, b) => {return b.mediaModel.likes - a.mediaModel.likes}) // TODO SORTING if medias > 1
        if (argument === "dateDesc"  && this.length > 1) this.#medias.sort((a, b) => {return new Date(b.mediaModel.date) - new Date(a.mediaModel.date)})
        if (argument === "titleAsc"  && this.length > 1) this.#medias.sort((a, b) => {return a.mediaModel.title.toLowerCase().localeCompare(b.mediaModel.title.toLowerCase())})
    }
}

// extrat the id param from the url
const getIdParam = () => {
    const params = (new URL(document.location)).searchParams
    return parseInt(params.get('id'))
}

const currentPhotographerId = getIdParam()

// push the photographer's infos to the DOM
function photographerInfostoDOM(photographerInfos){
    const mainNode = document.querySelector("#main")
    const photographerModel = photographerFactory(photographerInfos)
    const photographerSectionDOM = photographerModel.getUserCardDOM()
    mainNode.prepend(photographerSectionDOM)
    //document.querySelector("#openModalButton").addEventListener('click', () => displayModal())
}

async function init() {
    if (isNaN(currentPhotographerId)) return console.error("Missing id param. This user doesn't exist.")

    const {photographerInfos, medias, errorMessage } = await fetchSelectedPhotographerDatas(currentPhotographerId) // TODO deal with unknown id

    if(errorMessage !== undefined) return console.error(errorMessage)
        // TODO duplicate medias into a new global var to be able to cycle on it to populate the lightbox

    photographerInfostoDOM(photographerInfos)
    lightbox = new Lightbox(document.querySelector('#lightbox_modal'), medias) // lightbox should get medias from medialibrary

    // build the medialibrary before sorting it
    mediaLibrary.build(medias).sort("likesDesc")
    const gallerySection = document.querySelector(".gallery")
    // specify a container into the DOM then push the medialibrary to the DOM
    mediaLibrary.addDOMTarget(gallerySection).toDOM()
};

const mediaLibrary = new MediaLibrary()
init();