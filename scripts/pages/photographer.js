const currentPage = "photographer.html"
//const defaultFilter = "likesDesc"
//let filter = "likesDesc"
//let likedMediasIds = []
let lightbox

class MediaLibrary {
    #medias = [] // [{ mediaModel , getMediaCardDOM }, ...]
    #likes
    #currentSorting

    constructor(){ }

    // build the medialibrary cycling through all the medias produced by the mediafactory
    build(medias){
        medias.forEach(media => {
            const mediaModel = mediaFactory(media) // TODO error testing
            mediaLibrary.add(mediaModel)
        })
        console.log(this.#medias)  
    }

    // add a media generated by the media factory to the medialibrary
    add(mediaModel){
        this.#medias.push(mediaModel)
    }

    toDOM(parent){
        parent.innerHTML=""
        this.#medias.forEach(media => {
            const mediaCardDOM = media.getMediaCardDOM() // TODO error testing
            parent.appendChild(mediaCardDOM)
        })
    }

    get likesSum(){

    }

    get length(){
        return this.#medias.length
    }

    isLiked(mediaId){ // or liked key into the media object?

    }

    sort(argument){
        if(argument!=="likesDesc" && argument!=="dateDesc" && argument!=="titleAsc" ) throw new Error("Unknown sorting argument.") 
        this.#currentSorting = argument
        if (argument === "likesDesc"  && this.length > 1) this.#medias.sort((a, b) => {return b.mediaModel.likes - a.mediaModel.likes}) // TODO SORTING if medias > 1
        if (argument === "dateDesc"  && this.length > 1) this.#medias.sort((a, b) => {return new Date(b.mediaModel.date) - new Date(a.mediaModel.date)})
        if (argument === "titleAsc"  && this.length > 1) this.#medias.sort((a, b) => {return a.mediaModel.title.localeCompare(b.mediaModel.title)})
    }
}

const getIdParam = () => {
    const params = (new URL(document.location)).searchParams
    return parseInt(params.get('id'))
}

const currentPhotographerId = getIdParam()

/*function buildMediaLibrary(medias){
    medias.forEach(media => {
        const mediaModel = mediaFactory(media)
        mediaLibrary.add(mediaModel)
    })
}*/

/*function librarytoDOM(){

}*/

/*function mediastoDOM(medias){
    const gallerySection = document.querySelector(".gallery")
    gallerySection.innerHTML=""
    mediaLibrary.toDOM(gallerySection)
    medias.forEach(media => { // get it out of infostoDOM and create a function buildLibrary
        const mediaModel = mediaFactory(media)
        // update mediaModel.likes cycling on likedMediasIds
        if(!mediaModel?.error){ // if mediaModel = image || video only 
            const mediaCardDOM = mediaModel.getMediaCardDOM()
            gallerySection.appendChild(mediaCardDOM)
        }
    })

    // foreach medias into mediaLibrary getDOM + gallerySection.appendChild
}*/

function photographerInfostoDOM(photographerInfos){
    const mainNode = document.querySelector("#main")
    const photographerModel = photographerFactory(photographerInfos)
    const photographerSectionDOM = photographerModel.getUserCardDOM()
    mainNode.prepend(photographerSectionDOM)
    //document.querySelector("#openModalButton").addEventListener('click', () => displayModal())
}

async function init() {
    if (isNaN(currentPhotographerId)) return console.error("Missing id param. This user doesn't exist.")

    const {photographerInfos, medias, errorMessage } = await fetchSelectedPhotographerDatas(currentPhotographerId) // TODO deal with unknown id

    if(errorMessage !== undefined) return console.error(errorMessage)
        // TODO duplicate medias into a new global var to be able to cycle on it to populate the lightbox

    photographerInfostoDOM(photographerInfos)
    lightbox = new Lightbox(document.querySelector('#lightbox_modal'), medias)

    mediaLibrary.build(medias)
    mediaLibrary.sort("likesDesc")
    const gallerySection = document.querySelector(".gallery")
    mediaLibrary.toDOM(gallerySection)
};

const mediaLibrary = new MediaLibrary()
init();